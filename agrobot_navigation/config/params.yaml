amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 12.0
    laser_min_range: 0.28
    laser_model_type: "likelihood_field"
    max_beams: 120
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::OmniMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.05
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False

    speed_limit_topic: "/speed_limit"
    odom_topic: "/odometry/filtered"
    # enable_stamped_cmd_vel: False


    controller_frequency: 20.0
    use_realtime_priority: False   #Adds soft real-time prioritization to the controller server to better ensure resources to time sensitive portions of the codebase. 
    publish_zero_velocity: True    # Whether to publish a zero velocity command on goal exit.

    min_x_velocity_threshold: 0.001       # odometry values below this threshold (in m/s) will be set to 0.0.
    min_y_velocity_threshold: 0.001         #!Odometry values below this threshold (in m/s) will be set to 0.0. For non-holonomic robots
    min_theta_velocity_threshold: 0.001   #Odometry values below this threshold (in rad/s) will be set to 0.0.
    failure_tolerance: 0.3                # The maximum duration in seconds the called controller plugin can fail

    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["stopped_goal_checker"] 
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    # Goal checker parameters
    stopped_goal_checker:
      plugin: "nav2_controller::StoppedGoalChecker"
      trans_stopped_velocity: 0.1     # Velocity below is considered to be stopped at tolerance met (m/s).
      rot_stopped_velocity: 0.1
      xy_goal_tolerance: 0.25         # Tolerance to meet goal completion criteria (m).
      yaw_goal_tolerance: 0.25
      stateful: True                  # Whether to check for XY position tolerance after rotating to goal orientation in case of minor localization changes.

    # Controller parameters - MPPI Controller
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 40          #? Number of time steps (points) in candidate trajectories (default: 56)
      model_dt: 0.05         #. Time interval (s) between two sampled points in trajectories. 0.033 @ 30 Hz
      batch_size: 5000        #* Count of randomly sampled candidate trajectories from current optimal control sequence in a given iteration. 1000 @ 50 Hz or 2000 @ 30 Hz seems to produce good results.
      vx_std: 0.2             #? Sampling standard deviation 
      vy_std: 0.2             #* For Holonomic robots, y-velocity standard deviation
      wz_std: 0.4
      vx_max: 0.4             #. Target Maximum Forward velocity (m/s)
      vx_min: -0.4            #. Target Maximum Reverse velocity (m/s)
      vy_max: 0.5             #* For Holonomic robots, Target Maximum lateral velocity (m/s)
      wz_max: 1.2             #. Maximum rotational velocity (rad/s)
      ax_max: 1.0             #. Maximum Forward acceleration (m/s^2)
      ax_min: -1.0            #. Maximum deceleration along the X axis (m/s^2)
      ay_max: 1.0        
      az_max: 3.5             #. Maximum angular acceleration (rad/s^2).

      iteration_count: 1      #? Iteration count in MPPI algorithm. Recommend to keep as 1 and prefer more batches.
      retry_attempt_limit: 1  #* Number of attempts to find feasible trajectory on failure for soft-resets before reporting failure.
      temperature: 0.3
      gamma: 0.015            #? A trade-off between smoothness (high) and low energy (low)
      motion_model: "Omni"     # DiffDrive, Omni, or Ackermann
      visualize: true               #. Whether to publish debugging trajectories for visualization. This can slow down the controller substantially (e.g. 1000 batches of 56 size every 30hz is a lot of data).
      reset_period: 1.0             #* (only in Humble) required time of inactivity to reset optimizer
      regenerate_noises: false      #? Whether to regenerate noises each iteration or use single noise distribution computed on initialization and reset.

      #. Path Handler
      transform_tolerance: 0.1  # Time tolerance for data transformations with TF (s).
      prune_distance: 1.7
      # max_robot_pose_search_dist: Default: Costmap half-size. Max integrated distance ahead of robot pose to search for nearest path point in case of path looping.
      # If true, it will prune paths containing cusping points for segments changing directions (e.g. path inversions) such that the controller will be forced to change 
      # directions at or very near the planner’s requested inversion point. 
      # This is targeting Smac Planner users with feasible paths who need their robots to switch directions where specifically requested.
      enforce_path_inversion: False 
      inversion_xy_tolerance: 0.2  #? Cartesian proximity (m) to path inversion point to be considered “achieved” to pass on the rest of the path after path inversion.
      inversion_yaw_tolerance: 0.4  #? Angular proximity (radians) to path inversion point to be considered “achieved” to pass on the rest of the path after path inversion. 0.4 rad = 23 deg.

      TrajectoryVisualizer:
        trajectory_step: 5  # The step between trajectories to visualize to downsample candidate trajectory pool.
        time_step: 3        # The step between points on trajectories to visualize to downsample trajectory density.

      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic", "TwirlingCritic"]
      
      #* This critic penalizes trajectories that have components outside of the set dynamic or kinematic constraints
      ConstraintCritic: #. Robot Limits
        enabled: true
        cost_power: 1     # Power order to apply to term.
        cost_weight: 4.0  # Weight to apply to critic term.
      
      #* This critic incentivize navigating spatially towards the goal when in reasonable proximity to goal
      GoalCritic:
        enabled: true
        cost_power: 1    
        cost_weight: 5.0 
        threshold_to_consider: 1.4 #Minimal distance (m) between robot and goal above which goal distance cost considered. 
        #It is wise to start with this as being the same as your prediction horizon to have a clean hand-off with the path follower critic.

      #* This critic incentivize navigating to achieve the angle of the goal pose when in reasonable proximity to goal
      GoalAngleCritic:
        enabled: true
        cost_power: 1               # Power order to apply to term.
        cost_weight: 3.0             # Weight to apply to critic term.
        threshold_to_consider: 0.5  # Minimal distance (m) between robot and goal above which angle goal cost considered

      # * This critic incentivize moving in the forward direction, rather than reversing.
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 1.5    #. Increasing this value makes the robot more strongly prefer forward motion(default: 5.0)
        threshold_to_consider: 0.5  # Distance (m) between robot and goal to stop considering preferring forward and allow goal critics to take over.

      #* This critic incentivize navigating away from obstacles and critical collisions using either a circular robot point-check or full SE2 footprint check using distances from obstacles.
      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 4.0           # Weight to apply to critic for generally preferring routes in lower cost space.
        critical_weight: 20.0           # Weight to apply to critic for near collisions closer than collision_margin_distance to prevent near collisions only as a method of virtually inflating the footprint.
        consider_footprint: True        # Whether to use point cost (if robot is circular or low compute power) or compute SE2 footprint cost.
        collision_cost: 10000.0         # Cost to apply to a true collision in a trajectory.
        collision_margin_distance: 0.1  # Margin distance (m) from collision to apply severe penalty, similar to footprint inflation. Between 0.05-0.2 is reasonable.
        near_goal_distance: 0.5         # Distance (m) near goal to stop applying preferential obstacle term to allow robot to smoothly converge to goal pose in close proximity to obstacles.
        inflation_radius: 0.8           # (only in Humble) Radius to inflate costmap around lethal obstacles. This should be the same as for your inflation layer
        cost_scaling_factor: 10.0       # (only in Humble) Exponential decay factor across inflation radius. This should be the same as for your inflation layer

      #* This critic incentivize aligning with the global path, if relevant. It does not implement path following behavior.
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05  # Maximum proportion of the path that can be occupied before this critic is not considered to allow the obstacle
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20        # Checks that the candidate trajectories are sufficiently far along their way tracking the path to apply the alignment critic
        use_path_orientations: true     # Use orientations from Smac Planner 
        # If you want the robot to deviate and invert directions where the controller sees fit, keep as false. If your plans do not contain orientation information (e.g. navfn), keep as false.

      #* This critic incentivize making progress along the path. This is what drives the robot forward along the path.
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5   # Number of path points after furthest one any trajectory achieves to drive path tracking relative to.
        threshold_to_consider: 1.4

      #* This critic penalizes trajectories at a high relative angle to the path. This helps the robot make sharp turns when necessary due to large accumulated angular errors.
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 2  # Use orientations from Smac Planner
        #. Mode of operations for the path angle critic depending on path input types and behavioral desires
        # 0: Forward Preference, penalizes high path angles relative to the robot’s orientation to incentivize turning towards the path.
        # 1: No directional preference, penalizes high path angles relative to the robot’s orientation or mirrored orientation (e.g. reverse), which ever is less, when a particular direction of travel is not preferable.
        # 2: Consider feasible path orientation, when using a feasible path whereas the path points have orientation information (e.g. Smac Planners), consider the path’s requested direction of travel to penalize path angles such that the robot will follow the path in the requested direction.

      TwirlingCritic:
        enabled: true
        cost_power: 1
        cost_weight: 10.0


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      sensor_frame: laser
      use_sim_time: False
      rolling_window: true
      width: 5.0
      height: 5.0
      resolution: 0.05
      # robot_radius: 0.45
      footprint: '[ [0.35, 0.35], [-0.35, 0.35], [-0.35, -0.35], [0.35, -0.35] ]'
      # plugins: ["voxel_lidar_layer", "voxel_pc_layer", "inflation_layer"]
      plugins: ["voxel_lidar_layer", "inflation_layer"]
      # filters: ["keepout_filter"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.58
        inflation_radius: 1.75
      voxel_lidar_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: False
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 3.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 3.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      # keepout_filter:
      #   plugin: "nav2_costmap_2d::KeepoutFilter"
      #   enabled: True
      #   filter_info_topic: "/costmap_filter_info_keepout"

      # voxel_pc_layer:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   publish_voxel_map: False
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   max_obstacle_height: 3.0
      #   mark_threshold: 0
      #   observation_sources: scan
      #   scan:
      #     topic: /scan/d455
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True
      #     data_type: "LaserScan"
      #     raytrace_max_range: 2.4
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 1.9
      #     obstacle_min_range: 0.0
          
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True

      range_sensor_layer:
        plugin: "nav2_range_sensor_layer::RangeSensorLayer"
        topics: /front_ultra # List of range sensor topics
        clear_on_max_reading: false
        min_range: 0.2
        max_range: 4.0
        no_readings_timeout: 2.0
        clear_threshold: 0.2
        mark_threshold: 0.8

      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.40
      # footprint: '[ [0.35, 0.35], [-0.35, 0.35], [-0.35, -0.35], [0.35, -0.35] ]'
      resolution: 0.05
      track_unknown_space: true
      # plugins: ["static_layer", "obstacle_layer", "obstacle_pc_layer", "inflation_layer"]
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      filters: ["keepout_filter", "speed_filter"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True 
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      # obstacle_pc_layer:
      #   plugin: "nav2_costmap_2d::ObstacleLayer"
      #   enabled: True
      #   observation_sources: scan
      #   scan:
      #     topic: /scan/d455 
      #     max_obstacle_height: 2.0
      #     clearing: True
      #     marking: True 
      #     data_type: "LaserScan"
      #     raytrace_max_range: 2.4
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 1.9
      #     obstacle_min_range: 0.0

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.58
        inflation_radius: 1.75
      always_send_full_costmap: True
      # voxel_layer_3d:
      #   plugin: "nav2_costmap_2d::VoxelLayer"
      #   enabled: True
      #   footprint_clearing_enabled: True
      #   publish_voxel_map: True
      #   origin_z: 0.0
      #   z_resolution: 0.05
      #   z_voxels: 16
      #   unknown_threshold: 15
      #   mark_threshold: 0
      #   observation_sources: pointcloud
      #   combination_method: 1
      #   pointcloud:
      #     topic: /d455/depth/color/points
      #     max_obstacle_height: 10.0
      #     min_obstacle_height: 0.10
      #     clearing: True
      #     marking: True
      #     data_type: "PointCloud2"
      #     raytrace_max_range: 5.5
      #     raytrace_min_range: 0.0
      #     obstacle_max_range: 5.0
      #     obstacle_min_range: 0.0
          
      # keepout_filter:
      #   plugin: "nav2_costmap_2d::KeepoutFilter"
      #   enabled: True
      #   filter_info_topic: "/costmap_filter_info_keepout"

      # speed_filter:
      #   plugin: "nav2_costmap_2d::SpeedFilter"
      #   enabled: True
      #   filter_info_topic: "/costmap_filter_info_speedlimit"
      #   speed_limit_topic: "/speed_limit"
map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: map.yaml

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5                              #. tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false                   #! whether or not to downsample the map
      downsampling_factor: 1                      #! multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false                        #? allow traveling in unknown space
      max_iterations: 1000000                     #* maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000            #* maximum number of iterations to attempt to reach goal once in tolerance
      terminal_checking_interval: 5000            #* number of iterations between checking if the goal has been cancelled or planner timed out
      max_planning_time: 3.5                      #. max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "REEDS_SHEPP"            #. For Hybrid Dubin, Reeds-Shepp
      cost_travel_multiplier: 2.0                 # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 72                 #. For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5               #* For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0          #* For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe short cutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      analytic_expansion_max_cost: 200            #* For Hybrid/Lattice nodes: The maximum single cost for any part of an analytic expansion to contain and be valid (except when necessary on approach to goal)
      analytic_expansion_max_cost_override: false #* For Hybrid/Lattice nodes: Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required). If expansion is within 2*pi*min_r of the goal, then it will override the max cost if ``false``.
      minimum_turning_radius: 0.40                #. For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 1.5                        #. For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                         #? For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.4                   #. For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1 INCREASED FROM 1.2
      cost_penalty: 5.0                           #. For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015                #. For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      rotation_penalty: 5.0                       #! For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      lookup_table_size: 20.0                     #. For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: False             #. For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replanning of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      allow_reverse_expansion: False              #! For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.
      smooth_path: True                           #. For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      debug_visualizations: True                  #* For Hybrid/Lattice nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      allow_primitive_interpolation: False        #* Allows a user to add additional primitives to the exploration set to interpolate between the angular quantization jumps between the normal primitive set (e.g. left, right, straight).
      downsample_obstacle_heuristic: True         #* This allows a user to disable downsampling of the obstacle heuristic’s costmap representation to search at the costmap’s full-resolution.
      use_quadratic_cost_penalty: False           #* Advanced feature: This allows a user to specify a quadratic traversal and heuristic cost computation (e.g. cost * cost) rather than linear. 
      smoother:
        max_iterations: 1000                      #* The maximum number of iterations the smoother has to smooth the path, to bound potential computation.
        w_smooth: 0.3                             #* Weight for smoother to apply to smooth out the data points
        w_data: 0.2                               #* Weight for smoother to apply to retain original data information
        tolerance: 1.0e-10                        #* Parameter tolerance change amount to terminate smoothing session
        do_refinement: true                       #* Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further
        refinement_num: 2

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 14.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.2
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.3, 0.3, 1.0]
    min_velocity: [-0.3, 0.3, -1.0]
    max_accel: [0.3, 0.3, 0.8]
    max_decel: [-0.5, -0.5, -1.0]
    odom_topic: /odometry/filtered
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
